t0  = yop.time0();
tf  = yop.timef();
t   = yop.time();
x   = yop.state('size', [7, 1]);
u   = yop.control('size', [3, 1], 'deg', 2);
tau = yop.parameter();

x_min = [2e7; -1; -1; -1; -1;    pi; 0.1];
x_max = [6e7; +1; +1; +1; +1; 18*pi;   1];
x0 = [21837080.052835; 0; 0; -0.25396764647494; 0; pi; 1];

[dx, v, Qr] = spacecraft(x, u, tau);

ivp = yop.ivp( ...
    t0==0, tf==90e3, ...
    der(x) == dx, ...
    x(t0) == x0, ...
    u == Qr'*v/norm(v), ...
    tau == -25 ...
    );
sim = ivp.solve();

sim.plot(t, x(2))

%%

final_value = @(expr) value_at(expr, t, tf); % to reduce notational overhead

p=x(1); f=x(2); g=x(3); h=x(4); k=x(5); L=x(6); w=x(7);

ocp = yop.ocp('Low-thrust orbit');
ocp.max( w(tf) );
ocp.st( ...
    50e3 <= tf <= 100e3, ...
    der(x) == spacecraft(x, u, tau), ...
    x(t0) == x0, ...
    norm(u)^2 == 1, ...
    x_min <=  x  <= x_max, ...
     -1   <=  u  <= 1, ...
     -50  <= tau <= 0, ...
    p(tf) == 40007346.015232, ...
    final_value( f^2+g^2 ) == 0.73550320568829^2, ...
    final_value( h^2+k^2 ) == 0.61761258786099^2, ...
    final_value( f*h+g*k ) == 0, ...
    -3 <= final_value( g*h-k*f ) <= 0 ... 
    );
sol = ocp.solve('intervals', 250, 'guess', sim, 'degree', 3);


function e_t = value_at(expr, t, ti)
e_t = expr(t==ti);
end
