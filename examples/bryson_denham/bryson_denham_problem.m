%% Original formulation
[t, t0, tf] = yop.time('t');
p = yop.state('p'); % position
s = yop.state('s'); % speed
a = yop.control('a'); % acceleration
l = yop.parameter('l'); % maximum position of the cart

bdp = yop.ocp('Bryson-Denham Problem');
bdp.min( 1/2 * int(a^2) );
bdp.st( ...
    t0==0, tf==1, ... Yop specific
    der(p) == s, ...
    der(s) == a, ...
    p(t0) == p(tf) == 1, ...
    s(t0) == -s(tf) == 1, ...
    p <= l == 1/9 ... An interesting variation is to balance l and control effort
    );
bdp.build().present();

%% Guaranteed box constraints for boundary conditions

[t, t0, tf] = yop.time('t');
p = yop.state('p'); % position
s = yop.state('s'); % speed
a = yop.control('a'); % acceleration
l = yop.parameter('l'); % maximum position of the cart

bdp = yop.ocp('Bryson-Denham Problem');
bdp.min( 1/2 * int(a^2) );
bdp.st( ...
    t0==0, tf==1, ...
    der(p) == s, ...
    der(s) == a, ...
    p(t0) == 1 == p(tf), ... % SRF -> {p(t0)==1, 1==p(tf)}
    s(t0) ==  1, ...
    s(tf) == -1, ...
    p <= l == 1/9 ...
    );
bdp.build().present();

%% Removal of unncessary parameter

[t, t0, tf] = yop.time('t');
p = yop.state('p'); % position
s = yop.state('s'); % speed
a = yop.control('a'); % acceleration
l = 1/9;

bdp = yop.ocp('Bryson-Denham Problem');
bdp.min( 1/2 * int(a^2) );
bdp.st( ...
    t0==0, tf==1, ...
    der(p) == s, ...
    der(s) == a, ...
    p(t0) == 1, s(t0) ==  1, ...
    p(tf) == 1, s(tf) == -1, ...
    p <= l ...
    );
bdp.build().present();