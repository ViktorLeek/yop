classdef (Abstract) ast_ool < handle
    % yop.ast_ool
    % The purpose of this class is to make sure that classes that overload
    % operators and functions remember to implement them all. This is
    % important because classes yop.ast_relation and yop.ast_expression
    % have a dominance relation, and unless all methods are overloaded,
    % method calls can be dispatched to the wrong class.
    methods (Abstract)
        rel = lt(lhs, rhs)
        rel = gt(lhs, rhs)
        rel = le(lhs, rhs)
        rel = ge(lhs, rhs)
        rel = ne(lhs, rhs)
        rel = eq(lhs, rhs)
        sum = plus(lhs, rhs)
        diff = minus(lhs, rhs)
        id = uplus(expr)
        neg = uminus(expr)
        prod = times(lhs, rhs)
        prod = mtimes(lhs, rhs)
        frac = rdivide(lhs, rhs)
        frac = ldivide(lhs, rhs)
        frac = mrdivide(lhs, rhs)
        frac = mldivide(lhs, rhs)
        pow = power(lhs, rhs)
        pow = mpower(lhs, rhs)
        node = transpose(obj)
        node = ctranspose(obj)
        node = cat(dim, varargin)
        node = horzcat(obj, varargin)
        node = vertcat(obj, varargin)
        node = reshape(obj, varargin)
        node = repmat(obj, varargin)
        node = heaviside(obj)
        node = abs(obj)
        node = sqrt(obj)
        node = sin(obj)
        node = cos(obj)
        node = tan(obj)
        node = asin(obj)
        node = acos(obj)
        node = atan(obj)
        node = sinh(obj)
        node = cosh(obj)
        node = tanh(obj)
        node = asinh(obj)
        node = acosh(obj)
        node = atanh(obj)
        node = exp(obj)
        node = log(obj)
        node = log10(obj)
        node = floor(obj)
        node = ceil(obj)
        node = erf(obj)
        node = erfinv(obj)
        node = sign(obj)
        node = mod(a, m)
        node = atan2(y, x)
        node = trace(obj)
        node = sum(obj, varargin)
        node = norm(obj, varargin)
        node = min(obj, varargin)
        node = max(obj, varargin)
        node = sumsqr(obj)
        node = linspace(x1, x2, n)
        node = cross(A, B, varargin)
        node = det(obj)
        node = inv(obj)
        node = pinv(obj)
        node = dot(A, B, varargin)
        node = expm(obj)
        node = cumsum(obj, varargin)
        node = der(obj)
        node = alg(obj)
        node = int(obj)
    end
end